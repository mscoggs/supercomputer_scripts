import glob
import numpy as np
import yt
import sys
import matplotlib.pyplot as plt
from yt.units import kpc
from mpl_toolkits.axes_grid1 import AxesGrid
from matplotlib.colors import LogNorm
from yt.visualization.base_plot_types import get_multi_plot

mm_z = [23.277739, 22.651846, 22.06273, 21.512383, 20.992523, 20.500753, 20.034918, 19.59308, 19.177563, 18.77848, 18.398642, 18.03674, 17.69159, 17.3621, 17.047283, 16.74623, 14.926104, 14.703518, 14.489467, 14.281174, 14.080681, 13.887598, 13.699397, 13.5180025, 13.34103, 13.170327, 13.003641, 12.84083, 12.685508, 12.5318, 12.383297, 12.239772, 12.099293, 11.961762, 11.828736, 11.698413, 11.57229, 11.448649, 11.327416, 11.210012, 11.094823, 10.983224, 10.872254, 10.764706, 10.660448, 10.558022, 10.457378, 10.359763, 10.262529, 10.16944, 10.076651, 9.986596, 9.897995, 9.810811, 9.726161, 9.642826, 9.560777, 9.481082, 9.40258, 9.325245, 9.249052, 9.175011, 9.10101, 9.029084, 8.9591675, 8.88924, 8.821253, 8.754194, 8.688983, 8.623713, 8.560229, 8.497578, 8.435742, 8.374707, 8.315324, 8.256688, 8.198786, 8.141603, 8.085953, 8.030976, 7.975855, 7.9229946, 7.8699665, 7.8605347, 7.817564, 7.766547, 7.716116, 7.6662617, 7.616976, 7.56898, 7.52079, 7.473858, 7.4274397, 7.381527, 7.336112, 7.291874, 7.248103, 7.2041187, 7.165265, 7.1612663, 7.153947, 7.119519, 7.077544, 7.036001, 6.995522, 6.9554496, 6.915776, 6.876497, 6.837605, 6.7990947, 6.7615647, 6.7243934, 6.686986, 6.651109, 6.6149864, 6.579202, 6.5437536, 6.509199, 6.474959, 6.4404764, 6.4074073, 6.3740873, 6.3410664, 6.3083386, 6.2764316, 6.2442765, 6.2129254, 6.181844, 6.1510296, 6.120478, 6.0901875, 6.0606513, 6.030865, 6.0018206, 5.9998603]
mm_pos = [[0.47970212, 0.47722504, 0.45614967], [0.4799236, 0.47717044, 0.45661938], [0.48014122, 0.47710353, 0.45710456], [0.48035246, 0.47703382, 0.45758802], [0.4805743, 0.4769708, 0.4580789], [0.4807926, 0.47689897, 0.45856905], [0.48101866, 0.47682396, 0.4590609], [0.4812324, 0.47674686, 0.45952183], [0.48144895, 0.47667643, 0.45999438], [0.4816493, 0.47660884, 0.46044895], [0.48185495, 0.47653946, 0.46090743], [0.48206413, 0.47646236, 0.46136305], [0.48226726, 0.4763817, 0.46180212], [0.4824592, 0.47630036, 0.46224403], [0.48265812, 0.4762222, 0.46268064], [0.4828648, 0.47614157, 0.46311796], [0.48434225, 0.475675, 0.4660581], [0.48454508, 0.47558102, 0.46646973], [0.48475248, 0.47545, 0.46682256], [0.48494616, 0.47536376, 0.46725038], [0.48521936, 0.47529262, 0.46762046], [0.48537114, 0.47517574, 0.46797574], [0.48558944, 0.47510812, 0.4683289], [0.48577642, 0.4750687, 0.46867326], [0.4859539, 0.4749912, 0.46902186], [0.48616022, 0.47490352, 0.4693729], [0.48641694, 0.4748588, 0.46976584], [0.48675424, 0.47483137, 0.47013947], [0.4868493, 0.47475705, 0.4704898], [0.48706588, 0.4746912, 0.4708511], [0.4872863, 0.4745965, 0.4712194], [0.487537, 0.47448066, 0.47156376], [0.487781, 0.4744398, 0.4719208], [0.48797503, 0.47433028, 0.4722634], [0.4882289, 0.47427255, 0.472606], [0.48846692, 0.47418278, 0.47294226], [0.48871446, 0.47410285, 0.47327113], [0.48893204, 0.47397643, 0.47360283], [0.48916164, 0.47389016, 0.4739317], [0.48944053, 0.4737891, 0.47426936], [0.48967677, 0.47367993, 0.4746007], [0.48992115, 0.47357962, 0.47493312], [0.4901736, 0.47346267, 0.47527504], [0.49044228, 0.47334334, 0.47560707], [0.49071866, 0.47322112, 0.47593346], [0.49102643, 0.47308594, 0.47626764], [0.491362, 0.4729331, 0.47660777], [0.49174684, 0.472731, 0.47694403], [0.4921331, 0.4725391, 0.47726443], [0.49251622, 0.4723109, 0.47744155], [0.4926039, 0.4722655, 0.47780424], [0.49333698, 0.47182995, 0.47801515], [0.49358982, 0.47167572, 0.47823733], [0.49382222, 0.47154194, 0.47845986], [0.49403134, 0.47141728, 0.47869474], [0.49419156, 0.47134122, 0.47894228], [0.4943525, 0.47126377, 0.47919157], [0.4944972, 0.47120777, 0.47943276], [0.49462184, 0.47116587, 0.47967008], [0.49473488, 0.47113803, 0.47992292], [0.49483278, 0.4711201, 0.4801662], [0.49491584, 0.47111586, 0.48041728], [0.49498522, 0.47112992, 0.48065388], [0.4950423, 0.4711405, 0.48089722], [0.4950898, 0.47118556, 0.48114508], [0.49513558, 0.47124085, 0.48138627], [0.49516514, 0.47131374, 0.4816208], [0.49517927, 0.47140914, 0.48186234], [0.49519297, 0.47151306, 0.48210388], [0.49519402, 0.4716349, 0.48234296], [0.49518806, 0.47178066, 0.48258102], [0.49516904, 0.4719398, 0.48281446], [0.49514616, 0.47213098, 0.48306164], [0.49509543, 0.4723518, 0.48329228], [0.49504018, 0.4726081, 0.48352748], [0.49495563, 0.47291514, 0.48375213], [0.4948733, 0.47326094, 0.484012], [0.49508736, 0.47375107, 0.48433453], [0.49524826, 0.47386903, 0.48458454], [0.49535635, 0.47393134, 0.48481938], [0.4954708, 0.47398278, 0.48509753], [0.49556375, 0.474037, 0.48537642], [0.49558556, 0.47402608, 0.4856986], [0.4956511, 0.474056, 0.48570248], [0.4956613, 0.47406724, 0.48596835], [0.4957356, 0.4740817, 0.48626655], [0.49577677, 0.47411975, 0.48657924], [0.49583274, 0.47412643, 0.4868785], [0.4958208, 0.47412044, 0.48725003], [0.4959095, 0.4741275, 0.4874856], [0.4959074, 0.474144, 0.48784158], [0.49590707, 0.4741546, 0.48817432], [0.49588943, 0.47416198, 0.48852715], [0.49592748, 0.4741419, 0.48884615], [0.49593312, 0.4741162, 0.48916337], [0.49632147, 0.47434157, 0.48921376], [0.49600425, 0.47402218, 0.48977783], [0.49606445, 0.47398946, 0.49007326], [0.4961278, 0.47397432, 0.49032432], [0.4961134, 0.4739472, 0.49038908], [0.49613628, 0.4739567, 0.49040353], [0.4961662, 0.47391552, 0.49063066], [0.496225, 0.47391796, 0.49090248], [0.49636692, 0.47427467, 0.49123594], [0.49634016, 0.47396728, 0.49139157], [0.49640775, 0.47397712, 0.4916391], [0.49646375, 0.47404438, 0.4918722], [0.49650356, 0.47413027, 0.49215144], [0.49651307, 0.4742028, 0.4924891], [0.49670985, 0.4743162, 0.49262115], [0.4965074, 0.47440565, 0.4931141], [0.49654084, 0.47454017, 0.49342716], [0.49646834, 0.47450072, 0.49375176], [0.4962363, 0.47416866, 0.49406868], [0.49641973, 0.47450283, 0.49438277], [0.49639297, 0.47445282, 0.4947053], [0.49638277, 0.4744039, 0.4950201], [0.4963845, 0.47440845, 0.49535283], [0.49642572, 0.47442573, 0.49565494], [0.49647748, 0.47442046, 0.49595317], [0.49652326, 0.47445706, 0.49627784], [0.4965863, 0.47449967, 0.49657288], [0.4966465, 0.47455812, 0.49688733], [0.49670318, 0.47460812, 0.49720353], [0.49676654, 0.47467536, 0.49752042], [0.49681446, 0.47472784, 0.49782786], [0.49686056, 0.47476622, 0.49814507], [0.49691692, 0.47484332, 0.49845847], [0.49696514, 0.47489545, 0.49878347], [0.4970247, 0.47493488, 0.4990856], [0.4970525, 0.47506303, 0.49941516], [0.49714157, 0.47513768, 0.49970776], [0.49722362, 0.4752331, 0.5000472], [0.4972891, 0.47530848, 0.50036377], [0.49729192, 0.47531515, 0.5003845]]
mm_rad = [2.144, 2.503, 2.819, 3.153, 3.699, 4.127, 4.482, 4.761, 4.975, 5.178, 5.397, 5.599, 5.889, 6.203, 6.61, 7.181, 10.502, 10.89, 11.65, 11.847, 12.179, 12.394, 12.615, 12.882, 13.11, 13.25, 13.518, 13.787, 13.84, 14.065, 14.119, 14.429, 14.831, 14.867, 15.156, 15.271, 15.416, 15.239, 15.26, 15.09, 15.133, 15.755, 15.747, 15.782, 15.365, 15.185, 14.208, 14.417, 13.588, 13.218, 12.826, 12.762, 12.697, 12.631, 10.983, 10.736, 9.918, 8.953, 9.865, 8.872, 8.5, 8.306, 8.364, 8.236, 7.937, 7.578, 7.954, 7.575, 7.652, 7.536, 7.275, 7.275, 7.105, 7.057, 6.857, 6.704, 6.121, 110.873, 112.791, 114.544, 116.388, 118.305, 119.873, 120.26, 121.433, 122.736, 123.945, 125.158, 126.426, 128.009, 129.556, 131.374, 133.389, 135.423, 137.193, 138.66, 139.829, 141.142, 142.261, 142.338, 142.58, 143.469, 144.482, 145.494, 146.655, 147.796, 148.864, 149.764, 150.541, 151.296, 152.195, 153.334, 154.268, 155.038, 156.354, 157.323, 158.194, 159.039, 159.905, 160.785, 161.786, 162.846, 163.89, 164.854, 165.74, 166.656, 167.603, 168.395, 169.152, 169.809, 170.469, 171.037, 171.589, 172.086, 172.115]

#mm_filter = np.where((np.array(mm_z) <max_z+0.001) & (np.array(mm_z) > min_z -0.001))
mm_z2 = np.array(mm_z)
mm_pos2 = np.array(mm_pos)
mm_rad2 = np.array(mm_rad)

mm_parent_rvir = [57.589, 55.892, 57.262, 58.569, 48.407, 70.997, 71.542, 72.224, 72.873, 73.061, 74.229, 74.832, 75.523, 76.604, 77.963, 78.925, 79.638, 80.23, 80.859, 81.708, 82.691, 84.316, 86.731, 91.304, 95.183, 97.756, 74.174, 74.983, 71.484, 15.984, 15.976, 67.532, 67.982, 59.655]
mm_parent_pos = [[0.49195954, 0.47242117, 0.4753694], [0.49201587, 0.47245845, 0.47566763], [0.49208733, 0.47247046, 0.4759859], [0.49219403, 0.4724507, 0.47633982], [0.49230954, 0.4723884, 0.47670636], [0.49240953, 0.4724328, 0.47701797], [0.4924532, 0.47252855, 0.47728664], [0.49252784, 0.4725715, 0.47759828], [0.49263418, 0.4725884, 0.4779317], [0.49274158, 0.47279507, 0.47821516], [0.4928053, 0.47238347, 0.47870952], [0.49289614, 0.47248697, 0.4790113], [0.49291304, 0.4724419, 0.47933945], [0.49303204, 0.47254157, 0.47952253], [0.49314648, 0.47269756, 0.4798275], [0.49322397, 0.47268593, 0.48009014], [0.49329087, 0.47268838, 0.4803592], [0.4933951, 0.47273627, 0.4806282], [0.49346304, 0.47275248, 0.48088348], [0.49359155, 0.47288454, 0.48110107], [0.4936796, 0.47295284, 0.48135564], [0.49376622, 0.473031, 0.48159614], [0.49384758, 0.4730648, 0.48185566], [0.49393418, 0.47310108, 0.48211798], [0.49401447, 0.4732053, 0.48234898], [0.4940954, 0.4732264, 0.4825877], [0.49533522, 0.47389156, 0.48107675], [0.49532112, 0.4739039, 0.48152748], [0.49531516, 0.4739345, 0.48202747], [0.49516726, 0.4725426, 0.48290917], [0.49543485, 0.4727018, 0.48340565], [0.49519122, 0.47393417, 0.48348594], [0.4950634, 0.47387007, 0.48398805], [0.49490282, 0.47378278, 0.48444718]]
mm_filtered_z = [10.764706, 10.660448, 10.558022, 10.457378, 10.359763, 10.262529, 10.16944, 10.076651, 9.986596, 9.897995, 9.810811, 9.726161, 9.642826, 9.560777, 9.481082, 9.40258, 9.325245, 9.249052, 9.175011, 9.10101, 9.029084, 8.9591675, 8.88924, 8.821253, 8.754194, 8.688983, 8.623713, 8.560229, 8.497578, 8.435742, 8.374707, 8.315324, 8.256688, 8.198786]

yt.enable_parallelism()

file_list = np.sort(glob.glob("DD010?/output_????"))
print(file_list)
for file in file_list:
ds = yt.load(file)
redshift = ds.current_redshift
print("Working on redshift: "+str(redshift))
i = np.where(np.abs(np.array(mm_z2)-redshift) < 0.01)[0][0]
print("i="+str(i))

if(np.any(np.abs(np.array(mm_filtered_z)-redshift) < 0.01)):
PARENT = True
j = np.where(np.abs(np.array(mm_filtered_z)-redshift) < 0.01)[0][0]
print("j="+str(j))
else: PARENT = False


c=ds.arr(mm_pos2[i], 'code_length')
radius = 80
width = ds.quan(2*radius, 'kpc/h')
field = ('deposit', 'all_cic')
region =  ds.region(c,c-0.5*width,c+0.5*width)

slc = []
print("loading z projection")
slc.append(yt.ProjectionPlot(ds, 'z', field, center=c, width=width, data_source=region,weight_field=field))
print("loading x projection")
slc.append(yt.ProjectionPlot(ds, 'x', field, center=c, width=width, data_source=region,weight_field=field))
print("loading y projection")
slc.append(yt.ProjectionPlot(ds, 'y', field, center=c, width=width, data_source=region,weight_field=field))

slc_frbs = [s.data_source.to_frb((800/(radius*2), "kpc/h"), 800) for s in slc]
slc_arrs = [np.array(slc_frb[field]) for slc_frb in slc_frbs]



orient = "horizontal"
fig, axes, colorbars = get_multi_plot(3,1, colorbar=orient)
for y in range(3):
axes[0][y].xaxis.set_visible(False)
axes[0][y].yaxis.set_visible(False)

axes[0][0].xaxis.set_visible(True)
axes[0][1].xaxis.set_visible(True)
axes[0][2].xaxis.set_visible(True)
axes[0][0].set_ylabel("Kpc/h")
axes[0][0].yaxis.set_visible(True)
axes[0][0].set_xlabel("Kpc/h\nZ Projection")
axes[0][1].set_xlabel("Kpc/h\nX Projection")
axes[0][2].set_xlabel("Kpc/h\nY Projection")
axes[0][1].set_title("Redshift "+str('%.3f'%(redshift)))

#convert ps, parent ps into kpc then add them to circles
#convert from physical to imshow units, apply it to circles and plots circles
#center things on parent, no need to offset parent halo. just offset mmh



mm_x,mm_y, mm_px, mm_py, = [],[],[],[]
for a in np.linspace(0, 2*np.pi, 1000) :
mm_x.append(mm_rad2[i]*np.cos(a))
mm_y.append(mm_rad2[i]*np.sin(a))
if(PARENT):
mm_px.append(mm_parent_rvir[j]*np.cos(a))
mm_py.append(mm_parent_rvir[j]*np.sin(a))


plots = []
for y in range(3):

plots.append(axes[0][y].imshow(slc_arrs[y],extent=[-radius,radius,-radius,radius], norm=LogNorm()))
axes[0][y].scatter(mm_x, mm_y,s=10, c="tab:orange", label=r"$r_{vir}$ MMH")

if(PARENT):
if(y==0): a,b = 0,1
elif(y==1): a,b = 1,2
else: a,b = 0,2
dp = (np.array(mm_parent_pos[j])-np.array(mm_pos2[i]))*28.4*1000
print(dp[a], dp[b])
print(np.array(mm_parent_pos[j])*28.4*1000)
print(np.array(mm_pos2[i])*28.4*1000)
filt = np.where((np.abs(mm_px+dp[a]) <0.9*radius) & (np.abs(mm_py+dp[b]) <0.9*radius))
axes[0][y].scatter(np.array(mm_px+dp[a])[filt], np.array(mm_py+dp[b])[filt],
s=10, c="tab:green", label=r"$r_{vir}}$ MMH-Parent")
axes[0][y].legend(loc="upper left")

plots[-1].set_cmap("bone")
#plots[-1].set_clim(1e-2,1)

for x in range(3):
axes[0][x].set_xticks(np.arange(-radius+20,radius-15,20))

t = r"$\mathrm{Projected \ Density}\ (\mathrm{g\ cm^{-2}})$"
k=0
for p, cax in zip(plots[0:3:1], colorbars):
if(k==1):
cbar = fig.colorbar(p, cax=cax, orientation=orient)
cbar.set_label(t)
else:
fig.colorbar(p, cax=cax, orientation=orient).remove()
k+=1
fig.savefig("figures/DD"+file.split("_")[-1]+"_collision.pdf",bbox_inches='tight')
